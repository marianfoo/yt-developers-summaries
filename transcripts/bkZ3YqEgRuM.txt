good morning good afternoon good evening
welcome to handson Sab Dev another Back
to Basics session with me DJ cacro
welcome one and all um we&amp;#39;ve got uh I&amp;#39;ve
got my I&amp;#39;m I&amp;#39;m looking at the chat up
here now I&amp;#39;ve got a little bit of a
different setup because I&amp;#39;m just trying
to minimize my requirements Hardware
wise but anyway welcome to gav Good
Morning gav says awaiting a lovely
session on CA or cap capap maybe I don&amp;#39;t
know and welcome to helmet in Brunswick
pound in Germany and welcome to visz in
Bangkok Thailand BKK I quite like the
the abbreviation BKK it&amp;#39;s pretty cool
like tlas three lesser
abbreviations I think Hit The Sweet Spot
with me in terms of you know just
perfect um so and also from or two Solly
Hull greetings to you zahed and welcome
it&amp;#39;s very sunny here it&amp;#39;s also I think
the pollen count is quite High I&amp;#39;ve been
sneezing
uh this morning uh I&amp;#39;ve just been
sneezing now I&amp;#39;ve just closed the stern
doors I was going to keep the stern
doors of my Naro open because the sun is
shining through in a lovely
way but um there&amp;#39;s lots of pollen coming
in as well as you can probably tell from
my
nose anyway so welcome Kiara bonjourno
to you in
um in breia in Italy and helmet I helmet
says I already had a training run for
next week&amp;#39;s ui5 con run hope I can be
part of the team of course you can be
part of the team you are part of the
team I&amp;#39;m currently injured of it well
that&amp;#39;s fine basically so what helmet is
referring to is of course next week is
code connect week where we have um an
sap code jam on Monday on uh cap and
service integration on Tuesday it&amp;#39;s
recap the conference about cap on
Wednesday it&amp;#39;s ui5 con on Thursday it&amp;#39;s
AB upcon 2024 Europe and uh it&amp;#39;s going
to be amazing so all those conferences
and events and things are taking place
at
in in Germany in person but also as we
put in the news the episode of which
went out yesterday I&amp;#39;ll give you a link
in a second you can watch all of the
sessions virtually so recap ui5 conon
and abaton all have uh live streams that
will be streaming each of the tracks and
the sessions in those tracks and we&amp;#39;re
having a run I think it&amp;#39;s on is it on uh
Tuesday Morning the morning before recap
uh I think that&amp;#39;s right helmet I know
that wter is going and Rob Robin of
course and I will be going so
everybody&amp;#39;s welcome whoever wants to go
will run at the uh the pace of the the
steadiest runner that&amp;#39;s cool so there we
go and Dwight hello to you where have
you been don&amp;#39;t do that ever
again well where was I last Friday uh I
was away I was on holiday yes had a long
weekend um so it was quite nice so uh
yeah sorry about that Dwight I won&amp;#39;t do
it again I&amp;#39;ll try not to do it again
although next week I am not here again
cuz I&amp;#39;m giving another code Jam after
code connect in lusen uh on Friday next
week so I&amp;#39;m not going to be doing a live
stream next week but the week after
again uh procedure good morning to you
and pratique good morning to you in
Brisbane ah marvelous good to see you
did you attend mastering sat sap that
was in Brisbane wasn&amp;#39;t it uh Kaza good
morning Bono here to cap exactly so see
I like that I like that cuz Attis has
got the spirit of the whole thing uh
chakia good morning to you and Daniel
good morning yes some amazing sessions
with so many new topics on cap I&amp;#39;m
hosting two workshop at
recap amazing amazing so I&amp;#39;ve got my
coffee so let me just switch to the main
scene so I can start sharing um some
stuff uh as you know let me put that in
the chat and I mean you should know this
anyway but links to all the resources
are always um in a little comment to the
sap Community event entry um about this
particular thing so that that&amp;#39;s that&amp;#39;s
this you know what&amp;#39;s it called Back to
Basics with Sab Cloud application
programming part 14 There&amp;#39;s the link to
the video we always put one of these in
here and then I always add a comment
with some of the stuff I want to share
and anything we do come across that you
know we want to also record in terms of
links we&amp;#39;ll put them in here as well so
there&amp;#39;s like a reference to everything
sashan good morning to you and
Mathematics good morning I love that
name mathematics how brilliant is that
so you&amp;#39;re all welcome I love you
all so um just a couple of things this
week&amp;#39;s sap developer news is there um
I&amp;#39;ve shared the link to this thing here
so you know I don&amp;#39;t need to share
individual links in the sap developer
news however um one of the one of the
items was on an awesome bot sap versions
bot just jump to that there I won&amp;#39;t play
the news but I&amp;#39;ll just
um uh scroll down there and of course in
the news there we go sap version bot uh
this is by our friend on the channel Mr
helmet tman so helmet um if you got any
other comments that you can want to put
in the in the chat about this
bot I use it so check out the news what
it is and you can go and follow it on uh
on uh on your masteron account in the
fediverse it&amp;#39;s amazing so uh yeah thank
you hel for doing that that&amp;#39;s really
good so I I keep up to date with all the
uh cap releases and other ui5 related
releases and also for example the btp
provider uh for terraform you know
that&amp;#39;s in there as well so that&amp;#39;s pretty
amazing uh so that&amp;#39;s that um oh yes
we&amp;#39;ve released
another short in the series Mark tman
good morning to you looking forward to
attending recap and ab up conf in order
next week yes what awesome great to be
great to catch up with you and any else
who&amp;#39;s going so in um YouTube we have a
playlist I don&amp;#39;t know why that&amp;#39;s all
gray there but anyway I have a playlist
and what we&amp;#39;re doing is we&amp;#39;re trying to
sort of um condense into like 60 seconds
or less in a you know mobile format some
sort of cap tips and tricks and bits of
info and everything see where it goes so
let us know in the chat right now
whether you think this is useful
interesting what else you might think
might go into a short form like this in
terms of sort of good to know things
about cap so latest one was on um C
plugins with the Telemetry plugin so
there we go and in fact we have Daniel
schlater in the room and I think did I
make a did I put in the comment there
about oh stop did I put in the comment
about um where is it where&amp;#39;s the
information
description uh no um but anyway we&amp;#39;ll
find it um there&amp;#39;s a really good in fact
Daniel Scher there we go kept CDs
plugins how to build uh supplementary
article reusable components yes I think
you should read that as well let&amp;#39;s add
that to reusable components for here
edit
ah uh because it&amp;#39;s awesome
edit why is that so small when you go to
edit let&amp;#39;s add it there for example
um reusable
components uh for cap there there we go
that&amp;#39;s in there now as well so we got
that as well okay so let&amp;#39;s get started
um
what I want to cover today with you if
that&amp;#39;s okay with you is um the after
handlers okay now let&amp;#39;s just take a step
back uh this is where we left off
exactly where we left off um last time
and we were looking starting to look at
handlers starting to look at custom
server implementations knowing also of
course that out of the box uh you know
the standard cap server the standard
handlers will do all of the heavy
lifting for us and it&amp;#39;s really only
extra bits on top of that standard heavy
lifting that we need to
implement um and one of the things we
looked at very briefly really was the on
Handler where we say Okay cap I DJ for
example or us you want to perform all
the work necessary to return the data
instead of you dear a cap server doing
the normal heavy lifting okay so that&amp;#39;s
quite
rare that you&amp;#39;d want to do that except
in the circumstance where for example
you&amp;#39;re implementing some custom Logic
for a no data action or a function
because those
implementations are also you would also
provide those in the context of an on
but we&amp;#39;re not we&amp;#39;ve not got to actions
and functions yet in od data in cap uh
so you know just put that let&amp;#39;s put that
aside for a second we also know there&amp;#39;s
a before Handler and put in the
chat what you
think uh we might use a before Handler
for um if you look at the links here um
there&amp;#39;s one down here um cap listening
one down here uh that talks about the
different handlers so if I go to the top
here where is it methods serve on before
and
after so before is a Handler that you
can register that&amp;#39;s
called um handlers run before the on
handlers frequently oh it&amp;#39;s giving the
game away now oh oh chakia chanaka gets
it anyway exactly data validation um and
also Amy Amy before can be used for
create and update operations
uh possibly
I can&amp;#39;t think of
a uh if you wanted to do some
pre-work uh when you were wanting to
handle Crea update operations then you
might want to put it in there before yes
but I think I think the the the most
common uh use case for a before Handler
is for uh inbound data or data
validation in general you know in in a
request that&amp;#39;s sent that contains data
okay um so Rick good morning to you and
good morning good afternoon AJ in uh
where are you AJ in Bangalore uh I don&amp;#39;t
even know a is my friend and colleague
and I don&amp;#39;t even know where he is
anyway we&amp;#39;re all Global we&amp;#39;re all
friends here but what we&amp;#39;re going to
look at today is the idea of the after
handlers which run after the on handlers
frequently to enrich outbound data right
so it&amp;#39;s and the really interesting thing
the really really interesting thing is
well there&amp;#39;s lots of interesting things
we spent a bit of time last time looking
at
the the things that are passed to such a
on Handler and we know that we get past
the request object and also by looking
by using the the rest operator we dug in
with debugging and we found that what
gets past is just one other value which
is a reference to next which is the the
next Handler in the chain that&amp;#39;s
actually part of the standard heavy
lifting mechanisms in the cap server
okay we found that out so again just to
repeat in fact if I if I replace that um
with the word next we sort of see we can
see with our eyes that&amp;#39;s the sort of
thing that gets passed to an on Handler
however
ever when we start thinking about let&amp;#39;s
just leave leave that there for a second
we we&amp;#39;ll do a um this. after as well
we&amp;#39;ll start registering this. after
we&amp;#39;ll do a read as well of the
books but
now let&amp;#39;s just do that as well there we
go but now what do we get in here what
do we get
past it&amp;#39;s not surp well surp is it
surprising that it&amp;#39;s not maybe it&amp;#39;s not
surprising but it&amp;#39;s not the same pair of
parameters that get passed to an on
Handler let&amp;#39;s have a look at the
documentation um Ser before here we go
CDs request here we go here&amp;#39;s the before
Handler type uh call back mechanism
here&amp;#39;s it where&amp;#39;s where&amp;#39;s the on there
we go there&amp;#39;s the on are we all
following this by the way there&amp;#39;s the on
and the Handler gets given two things
the actual request and the next function
and that&amp;#39;s what we&amp;#39; got reflected here
request and next okay we&amp;#39;re only got
this got these squiggly lines because of
course we&amp;#39;ve you we&amp;#39;ve defined these but
we&amp;#39;re not using these bit know there&amp;#39;s a
brilliant meme um you know with an
animal saying you know whoa It&amp;#39;s like
hold on edit I am going to use the
variable you know who calm down I think
it&amp;#39;s quite good um but here with the
after where is it the Handler gets given
two things but they&amp;#39;re slightly
different we get given the request just
in case in our after handling we need to
refer to something that came in in the
request but remember at this stage the
request has already been handled by
either the standard on Handler that&amp;#39;s
built into the cap server or by the
custom on hand on Handler that we&amp;#39;ve
written
right and what we get is the first and
arguably one could say the primary
parameter is the data the the stuff
that&amp;#39;s been retrieved or you know
calculated or
whatever because of the request that
came in as in we just get given hey by
the way uh after Handler here&amp;#39;s the data
that&amp;#39;s been retrieved do you want to do
anything with it before I give it back
to the requester right that&amp;#39;s the idea
of an after Handler so we get an array
of objects so so let&amp;#39;s
see what that means and also you get
some examples here here of what sort of
thing we might do we&amp;#39;ll come back to
this in a second um so let&amp;#39;s just do
this uh and say down here
um data should let&amp;#39;s call it data or
should we call it results should we call
it results or should we call it data I&amp;#39;d
like to call it data generically for now
we&amp;#39;re going to change it anyway so let&amp;#39;s
maybe call it data and the request okay
and what all will do
console.log data okay
right so far so good any questions um oh
by the
way was nice
coffee by the way by the way by the way
um in fact we we&amp;#39;ll get we&amp;#39;ll get rid of
this now we&amp;#39;ll get uh rid of
that uh
[Music]
so let&amp;#39;s start this
up CDs
watch and let&amp;#39;s see what
happens so we&amp;#39;re getting our hello world
log and we&amp;#39;re getting our I am in the
anonymous function log output and we&amp;#39;re
also not yet also and but we&amp;#39;re not yet
getting this console log data because of
course there&amp;#39;s no request that&amp;#39;s come in
that needs to be handled so let&amp;#39;s bring
in um local
poost 404 let&amp;#39;s just bring that here and
put that don&amp;#39;t happen to my oh not there
there uh no
ah uh what&amp;#39;s going on put that there
yeah since the upgrade to Mac OS son 14
whatever it&amp;#39;s broken something uh which
is annoying um so now we&amp;#39;re going to
make a request on
books now let me put my head down at the
bottom for a second
what does that tell us it tells us we
haven&amp;#39;t we&amp;#39;ve we&amp;#39;ve sort of not done any
heavy lifting the cap server has
retrieved or has processed the request
which is basically the request for the
entity set the books entity set let&amp;#39;s
move that across here for a second there
Bookshop
books let&amp;#39;s get rid of that there and
this output
here is the result of
this console loog data now in fact is it
worth taking a digression let me know on
the chat let me know on the chat is it
worth taking a
digression um because it&amp;#39;d be nice to
have our own custom log records wouldn&amp;#39;t
it you know we got this OD data log
record type here
CDs so why don&amp;#39;t we just
randomly um let&amp;#39;s get rid let&amp;#39;s get rid
of this whole hello world one anyway
right we don&amp;#39;t want that one but what
we&amp;#39;ll do is we&amp;#39;ll say
const log or uh logger logger let&amp;#39;s call
it logger so it&amp;#39;s sort of different to
log chakia says yes please your
digressions is a gold mine your
digression is a gold mine well thank you
very much I think um H not the same with
the return next on this do on read Visa
Visa says yes please um d i uh that
again not the same with the return next
on this on read exactly yes exactly
Dwight that&amp;#39;s really good and in fact
that reminds me remind me later on to
dig into what we need to do what is
expected of us because Dwight makes a
really really good point a really good
observation um we needed to make a
return on the on Handler of next if we
wanted the next thing to be called right
but here we&amp;#39;re not making any return at
all are
we um and when we start to look at some
examples which is the the the cap
samples not cap samples sap samples org
on GitHub has some great examples of the
after Handler in use and we&amp;#39;ll look at
those in a
second um we&amp;#39;ll s we&amp;#39;ll have a look at
some of the afters and see what people
do so Dwight brilliant observation um
and uh remind me in the chat it&amp;#39;s great
uh to look into what that is so where
were we oh yes log so what we can do is
C say CDs use the CDs um uh
facade and create a new logger logger
instance right and CDs log let&amp;#39;s give it
a name cap uh cap B2B right that&amp;#39;s our
sort of you know cap Back Back to Basics
thing now we&amp;#39;ve got that we can replace
calls to the boring console.log to this
logger instance we can also mess about
with the log levels but we&amp;#39;ll do that
another time because this is not all
about logging and we&amp;#39;ll do that there as
well so let&amp;#39;s get rid of that and do
that and now let&amp;#39;s just save
that make a request
again and now check it out how cool is
that you&amp;#39;ve got your own custom personal
log records cap B2B okay I think it&amp;#39;s
quite cool you know small things I&amp;#39;m I&amp;#39;m
I&amp;#39;m pleased with small
things like this little cinnamon roll
thing so so we&amp;#39;ve got logs
now and notice
then that what we get given is the in
the primary argument here the primary
parameter is the data that&amp;#39;s already
been retrieved by fulfilling effectively
more or less fulfilling the request and
we get a chance if we want
to to modify that what was that what was
the phrase that was used here um oh use
this use this method this after to
register handlers to run after the on
handlers frequently used to enrich
outbound data the Handler received two
arguments results the outcome of the on
Handler which R before and an instance
of the request just in case we need to
refer to it so let&amp;#39;s do a something
really stupid it&amp;#39;s but it&amp;#39;s a classic
thing right it&amp;#39;s a classic sort of just
adding on to a stream you know we&amp;#39;re
this is all about Basics here so let&amp;#39;s
just not complicate not boily
ocean what all will
do um is data do um
map uh well they going be books book
book.
tile add on an exclamation mark let&amp;#39;s
see what see what happens
there there okay let me make that a
little bit bigger so that&amp;#39;s a that&amp;#39;s
that&amp;#39;s a really stupid example and I&amp;#39;ve
deliberately sort of been very vague
about what I&amp;#39;m doing here with map with
the reference to data the data parameter
with this call back Anonymous callback
function and everything is you know
quite functional but I mean know that&amp;#39;s
that&amp;#39;s by The Bu so this is sort of also
thinking about what Dwight was talking
about and what my my answer to my my
response to what Dwight was had
observed it&amp;#39;s really interesting what&amp;#39;s
going on here so keep keep that in your
mind you know we&amp;#39;re actually inside a
code block and
remember remember when you have an
anonymous f a fat Arrow function like
this and you have a code block with
braces nothing gets returned unless you
explicitly say return this okay so what
is happening here how is this
modification in as a call back inside a
map function on the data inside a CO
braced code block how is that actually
having an effect on the data that is
passing through us going to the as a
response right because it works look we
get the exclamation marks there one two
three so have to think about that
now what was going to do then
um what was I going to do oh yes what
we&amp;#39;re going to do oh yes there&amp;#39;s loads
of things we can do um one of
the one of the things I started to get a
little bit tired
of is making a change here CDs watch is
really cool and it&amp;#39;ll monitor for
changes and restart the server look let
me just press save there as you know
everybody knows this yeah right it&amp;#39;ll
restart but then I&amp;#39;m going to go across
all the way across over here and then
refresh B there okay
now I won&amp;#39;t go into it in too much
detail because I wrote a blog post about
it recently but basically if we have a
look let&amp;#39;s get rid of that and
that I wrote a blog post called
controlling automatic HTTP requests in
cap nodejs design time bit a mouthful
but have a look at that and what I did
there was I sort of made things easier
for myself because I&amp;#39;m lazy and of
course you know one of one of the great
attributes of um one of the the supposed
attributes of a great program is
laziness so you know I&amp;#39;m striving to be
more
lazy is to have the requests
automatically resubmitted as well okay
now if what I can do let me get rid of
that what I can do here is I can open up
another terminal and I can for example
um if I
change um let if I say list uh list all
those and I can say ENT I think we&amp;#39;ve
mentioned ENT before ENT is a
ENT uh run arbitary commands when files
change I think let me know in the chat
if we&amp;#39;ve talked about this before let me
add that to that thing anyway
ENT ear nose and
throat uh what&amp;#39;s going on here there
there ENT Bang there right post so ENT
is in the uh Docker container as we can
see here in the dev container Dev
container Docker file here one of the
things I install is ENT which is quite
cool because it&amp;#39;s super useful so I can
say for example uh ENT uh Echo hello or
let&amp;#39;s just ENT date let&amp;#39;s just as as an
example right ENT date okay so it&amp;#39;ll run
that straight away and then when I
change something inside the serve
directory it&amp;#39;ll do whatever ENT tells it
to do so ENT is the thing that&amp;#39;s
monitoring the list of these files here
done save save save now the problem is
that if I were to say here for example
ENT curl silent local lat why say lat
Local Host 404 o data for
Bookshop books let&amp;#39;s get rid of that
thing there Bookshop books right like
that and then if I save that
again some there we go there we go it
sometimes doesn&amp;#39;t work because the
server is still re let me put my head up
there the server is still restarting
okay so the the request enter ENT makes
the Cur request a little bit too early
it doesn&amp;#39;t give the server time of
course
to start and you know starting with the
all strategy start serving start
listening and properly
launching so this blog post is all about
it&amp;#39;s 826 already DJ uh this blog post is
all about
using one of the amazing features of cap
server which are these life cycle
events okay so what I did is I created a
custom server
JS and started it required sap CDs you
is that big enough
required apcds and then started uh def
defined a callback on the
listening life cycle event and the
listening life cycle
event this is all about the cap server
now is an event that&amp;#39;s
fired
when it finally starts to listen on
Local 44 in this case you know when it&amp;#39;s
finally bound to that socket okay oh
Daniel says and this is very dangerous
because now there is a difference
between
[Music]
uh there is a difference there that
heart in the way on the on the chat
there&amp;#39;s a little heart thing I can&amp;#39;t see
what Daniel&amp;#39;s written um in fact well
I&amp;#39;ll write something uh to push up
Daniel&amp;#39;s chat so I can it moves up up a
bit in the chat there we go so um Daniel
says and this is very dangerous because
now there is a difference between the
record on the DB and what we see as data
on the UI yes exactly yeah so this is
this is a very good thing to point out
however I mean I&amp;#39;m guessing Daniel
Daniel&amp;#39;s referring to when I put the
exclamation
mark on the um on the on the string okay
it might not be but Daniel if it&amp;#39;s if
it&amp;#39;s not let me know what it
is but it&amp;#39;s just a simple example and
but also I think it&amp;#39;s also fair to say
if you look at the if you look at the um
the classic capay
example uh we see um here look adding
11%
uh discount uh to there and I think on
the previous ones it sort of adds dash
dash uh 11% discount onto this onto the
title of the book okay and that sort of
deliberately is super simple
deliberately so um and you probably
don&amp;#39;t want to do that uh for real I mean
put an exclamation mark on the end of a
string is stupid anyway but it&amp;#39;s just to
show you that we can modify the data or
add to the data here we&amp;#39;re actually you
know defining uh a value for a discreet
property here discount property um
Daniel&amp;#39;s right to point that out now um
that said you know we might want to
change things on the Fly we might want
to sort of automatically compute or
modify stuff on the fly if we if that&amp;#39;s
what we need to do from from a business
perspective but yes be aware of what you
do now um so we&amp;#39;ve got this got this
listening thing so we can start to start
to work with that so I can now then
write a file an empty file when the
listening event is fired so I did that
in my server thing quite cool but then I
thought tell you what I could make a
little plug-in out of this good morning
to Matias in Dortmund an old friend from
the handb channel welcome Matas so I
thought you know what I&amp;#39;m going to write
a a plug-in version of this so so I did
cap listening plugin that&amp;#39;s also in the
um list here cap listening plugin
so if you want to have a little go at
starting writing your own
plug-in this is probably the simplest
example of a plugin you could ever get
it&amp;#39;s almost like
nothing that is the entirety of the code
okay that&amp;#39;s exactly what we saw in the
blog post right but now it&amp;#39;s in the form
of a
plug-in uh so that and it&amp;#39;s got this
it&amp;#39;s it&amp;#39;s in the form of a file a magic
file name a bit like ser JS is a magic
file that the cap server will say oh
there&amp;#39;s a server.js a custom server
implementation I&amp;#39;ll load that and
execute the contents of that as well the
plug-in mechanism does a similar sort of
thing and if you call a file CDs plugin
in your imported npm package it&amp;#39;ll run
that and do all the magic so what we&amp;#39;ll
do here is we&amp;#39;ll say um npm install dve
Dev this is a Dev a design time
dependency so we don&amp;#39;t want it in our
you know in our run time in the cloud or
anything we just want it in the dev so
if we do that and we we can you can
install the package straight from for
example GitHub straight from git so
let&amp;#39;s do that this is a major dition but
there we go there we go uh clear let&amp;#39;s
do that npm install save Dev now what
what I mean by save Dev let&amp;#39;s just here
um package.json there let package.json
there let&amp;#39;s move that across to there
note that we got dependencies and Dev
dependencies we all do we all know the
difference between dependencies and Dev
dependencies in npm and node um me Ms
Dev dependencies sort of do what they
say on the tin their dependencies just
for the design time just while we&amp;#39;re
developing and that save Dev means save
it in there record this in there not in
there because that&amp;#39;s the stuff that
gets um gets installed when you build
and push to for example you know Cloud
Foundry which we don&amp;#39;t want we don&amp;#39;t
want we don&amp;#39;t want this in production so
let&amp;#39;s run
that that was a long
explanation Okay add did one package at
and notice there look line we got it in
line 14 cap listening plugin there&amp;#39;s a
reference to um the the repo there so
now if we oh in fact if we do an LS a
what is the lat let&amp;#39;s list in Long
format and show the latest last we can
see this this listening file that&amp;#39;s been
created it&amp;#39;s been created at 732 which
is just now 832 732 UTC and there it&amp;#39;s
because of this listening thing so if I
were to in fact um
watch LS minus L
listening there right if if I now Run is
it 730 it&amp;#39;s still 732 does that make
sense by the way and also is this
digression okay um I think I think it is
it might be useful because it it&amp;#39;s super
I find it super useful to be able to
sort of you know hands free have a have
my Cur request have my HTTP request
readon for me when I change something
but only when the server gets a chance
to restart so Shak says why is CD SDK
not not part of Dev dependencies well
that&amp;#39;s a that&amp;#39;s a really good question
maybe Daniel can help us out on that
question there but basically it&amp;#39;s almost
like cdsd
K is a given you need CSD cdsd K
installed globally to sort of bootstrap
the whole sort of project initiation
right so when I said CDs in it right at
the very start of this um series to
create a new cap project
there was no project there was no um you
know there was no package Json there was
no nothing it&amp;#39;s almost like the big bang
so we needed csdk sort of installed
globally anyway now um so that hopefully
that makes sense to ARA so now if I save
main.js that should restart the server
but o when and only when in fact um yeah
when and only when this server listening
gets retriggered we get the listening
event fired at the life cycle event and
then that will cause the cap plug PL in
to uh touch this listening file which
should change the Tim stamp so let&amp;#39;s
save that bum bum bum and then there 34
okay perfect
so with all that in mind what we can do
now is get rid of this what we can do
now is say um list listening so all we
need to do now is look out for the
listening file changes pass that to ENT
and then say let&amp;#39;s clear the screen
that&amp;#39;s also let&amp;#39;s put a few things let&amp;#39;s
put it in bash C uh dates and then curl
minus s Local Host you know what it&amp;#39;s
only when I&amp;#39;m on the live stream I type
lolcat host I always type Local Host
correctly when I&amp;#39;m not on the live
stream what&amp;#39;s going on 404 o data B4
catalog books and we&amp;#39;ll pass it into JQ
to format it nicely there oh what&amp;#39;s
going on uh bash C update curl minus s
local 44 o dat V4 catalog books uh let&amp;#39;s
just pass that not into JQ for a second
what&amp;#39;s going
on oh that&amp;#39;s why OA V4 what oh it&amp;#39;s not
catalog it&amp;#39;s it&amp;#39;s it&amp;#39;s
um
Bookshop there right okay so now now now
now now now watch
this I can make a change here save that
that will restart but only once that&amp;#39;s
restarted and started listening again
will this call be made okay does that
make sense let me know in the chat give
us a give us a give us a sign in the
chat that that makes sense and whether
you think that&amp;#39;s going to be useful for
you and also maybe you can sort of you
know clone the repo and start developing
your own plugins because it&amp;#39;s amazing
right um okay so now we&amp;#39;ve got
everything set up and we can sort of re
have these things retried now I can just
go into here and let&amp;#39;s sort of get rid
of this let&amp;#39;s put uh some x&amp;#39;s instead
right so x x x x x just to just show us
that we know we&amp;#39;re making a change we
can visually see that okay
fine now so actually just going back to
oh yeah no we we want to look at um we
want to look at some of the examples
don&amp;#39;t we so in
here what
I put here I just I don&amp;#39;t know what&amp;#39;s
going on with this white space here you
know I can&amp;#39;t I can&amp;#39;t make this white
space go away sorry about that um when
you have a nested bullet thing so here&amp;#39;s
some examples in
sap in the sap samples org on GitHub of
use of the after so let&amp;#39;s let&amp;#39;s open
them all up we don&amp;#39;t need that let&amp;#39;s get
rid of that let&amp;#39;s get rid of that let&amp;#39;s
open them all up and just have a quick
browse through uh do you find a custom
after Handler oh uh we&amp;#39;ll come back to
that in a second uh there right we&amp;#39;ve
seen that one already
so dot
after
so for example that bit bigger for
example and this is a great way I would
say to sort of learn about and just just
stare at and start to soak it up under
your
skin what it feels like to write
handlers what what CDs feels like what
what node.js handlers feel like you know
just I think we should read more code
right so for example here we can see
that you know an after Handler is being
used well there&amp;#39;s three after handlers
and they&amp;#39;re all being used in really
interesting to my brain to my small
brain ways they&amp;#39;re they&amp;#39;re being used in
an update context we&amp;#39;re using an after
Handler right now in a read context but
this is an update context so we can sort
you can go back and stare at that for
example and you can also you know pick
out some beautiful sort of cql right
core career language stuff but we&amp;#39;re
going do that another time so there&amp;#39;s
there&amp;#39;s one example let&amp;#39;s have a look
there there look at that there is that
um
classic that what I was referring to
when I was sort of addressing what
Daniel was very correctly pointing out
this is the Canon almost the canonical
capaya capir um example where we
basically append something onto a string
that of something that already exists so
add on to the end of the title-- 11%
discount but it&amp;#39;s I think it&amp;#39;s still
beautiful because it just it&amp;#39;s really
simple so this is the simplest thing
that could possibly work but
but who can spot what is the what is the
value of the first parameter that&amp;#39;s
passed to this after function each what
the heck is that all about put in the
chat what you think that is all about
okay have you ever seen each at all and
if so have you seen each in that
position in the parameter
list let me know in the chat we got to
come back to that uh there&amp;#39;s another
after after submit order and this is
also beautiful example right youit an
event so an after Handler is a really
good idea good idea is a really good
opportunity to do stuff
like emit function emit events when
things have happened because the after
he&amp;#39;s sort of saying well you know the
main the main event has happened event
is is an overloaded term there the M you
know the main handling of this request
has happened successfully so I&amp;#39;m going
to you know raise an event so this have
to submit order submit order given the
name we can sort of tell it&amp;#39;s probably a
o data function or an action so it&amp;#39;s not
you know a standard CR plus Q style
operation so oh wait this emit this.
emit ordered book right um we&amp;#39;ll do
events another time right and then
finally is it finally uh search for
after there look at that there&amp;#39;s another
beautiful example you can actually have
an after Handler there&amp;#39;s the actual uh
Handler
definition running for multiple
different operations on a a given
entity okay and then there was one more
which I think brings us back to what
Dwight said before after there read ah
yeah oh there we go that&amp;#39;s it that
that&amp;#39;s all there is not of one um so
check this out this is also interesting
because um oh atanu says and Sir can you
explain line 19 this. emit ah okay of
course where was it uh was it that one
there
maybe uh the
was it line 19 or 29 maybe I well
there&amp;#39;s a this.
emit now I guess I guess the the easiest
way to explain it if you go to to cap
somewhere in cap and do a search for
Emit let&amp;#39;s see what happens uh handling
operator emitter serve. emit there we go
serve. emit or messaging emitting events
okay
so generally the cap server it&amp;#39;s
this is this is philosophy um in scri in
scripting in some functional languages
in sort of you know obtuse philosophy
one version of which is every in in TCL
for example everything is a
string okay everything is a this
everything is a that everything is a
string in cap I think it&amp;#39;s also fair to
say in a sort of really light way
everything is an
event whether that&amp;#39;s incoming standard o
data operations like you know a read or
a query or a update or
incoming uh functions like you know
submit order or
actions all these are handled as events
right but also the cap server can
respond to events in the more
traditional sense of the word event I.E
events in the context of mqtt or uh a
mqp or HTTP based events right but so it
can it treats everything almost like the
same which is a beautiful way of
thinking about things but what cap can
also do what you can also do in a server
implementation is not only you know
respond to requests you can make
requests of external services for
example but you can also as well as
respond to uh incoming or events that
are
created you can also create events
yourself
so admitting events what did it say here
yeah there we go um a wait messaging
admit right so you can you can admit
events and event Eventing uh and cap is
just so amazing right so uh that&amp;#39;s
almost like a separate series we should
do that shouldn&amp;#39;t we we should do that
so hopefully that explains it a little
bit atanu is that let me know if that
explains it um so could that event be a
I wish I wish the YouTube chat wouldn&amp;#39;t
put that heart in the way because I
can&amp;#39;t see what uh Kaz that is saying let
me go there um could that event be a
post request to an S4 Hannah from btp
well yes but it wouldn&amp;#39;t be an event in
the same way that we&amp;#39;re looking at
here um in where was it there that is an
event that&amp;#39;s been defined okay um as uh
we&amp;#39;re digressing here but that&amp;#39;s let&amp;#39;s
just what was that where were we cat
service cat service let&amp;#39;s have a look um
authenticated user somewhere somewhere
somewhere there will be an event defined
right uh unless it&amp;#39;s a standard event uh
cap Service uh ordered book um we we
could look we could look but basically
there&amp;#39;ll be an event defined called
ordered book and that event will have a
payload defined and that payload in this
case has got a book um property and a
quantity property and a buyer property
right um so you know we we&amp;#39;ll dig into
that maybe another time but uh basically
it&amp;#39;s an event that&amp;#39;s defined um in in
sort of
what&amp;#39;s the word what&amp;#39;s the it used to be
called messaging service what&amp;#39;s it
called now
uh I don&amp;#39;t know uh sap Cloud messaging
service I don&amp;#39;t know what it&amp;#39;s called
now changed the name and it&amp;#39;s confused
me um basically it&amp;#39;s that sort of event
s that hopefully uh um explain that a
little bit kazes uh so yes you could
make a post to uh a post request to
esana in an after uh context of course
she could yes event mesh thank thank you
chak event mesh event mesh DJ come on
wake up um so there we go now um what
what we were about to look at we were
about to look at this thing here yes
there we go that thing there what time
is it
8:44
now I have a think maybe we&amp;#39;ll do this
next time because this takes a lot of I
think this should take a lot of digging
in notice on line 15 for each
how many people are aware of what for
each for each does in JavaScript in
nodejs
JavaScript and how that
differs philosophically but also
practically from map which we just
used and how that mutates changes or
doesn&amp;#39;t the data upon which it&amp;#39;s being
uh it is operating
this is such a beautiful example here
because we&amp;#39;ve
got this
after method and we&amp;#39;re passing it the
definition of a function oh sorry we&amp;#39;re
passing it a definition of a function
which basically is just that blue
highlighted bit there and that function
is basically Anonymous function
expecting a data parameter is only only
is only interested in the data in the
results that are passed to it and what
what it will do is it will call this
function change urgency due to subject
which is there right in this passing it
the data and what this does it receives
the data and makes sure the data there
is some data and also it&amp;#39;ll do a little
sort of uh little dance to say well you
know is this an array is this not an
array U if it it isn&amp;#39;t let&amp;#39;s just assume
let&amp;#39;s just make it an array by enclosing
in square brackets that&amp;#39;s quite
interesting in terms of um what we want
to look at shortly with each
right um but yes uh and then it will go
through each of the elements right in
this array with for each and
then set
something okay now the question is does
setting something inside of for each
mutate or
not okay that&amp;#39;s a big
question and what is this data you know
the what is data that gets passed to
us think these are really big
philosophical questions but I think it&amp;#39;s
important to understand how this I mean
we can we can use this as is you know
without thinking too deeply about it but
I think I think it&amp;#39;s important to
understand what actually is going on
now uh chinaka says uh chinaki is on
fire today with the chats brilliant
chinaka cudos to you um so map is a
higher order function which doesn&amp;#39;t
mutate the original array perfect
a higher order function basically a
higher order function phrase higher
order function is from functional
programming mostly and it means a
function that can take another function
as an argument and
or emit or sorry not don&amp;#39;t use emit
because that&amp;#39;s an overloaded term or and
or produce a new function as its output
okay that&amp;#39;s you know higher order
functions are a fundamental basis of
functional programming and it&amp;#39;s a
beautiful thing right so chakia is
correct in that uh regard but also
correct in that it the whole idea of map
is that if you use it in the normal way
it doesn&amp;#39;t change what you&amp;#39;re mapping
over it produces a
new instance of the array over which
you&amp;#39;re mapping now the Callback function
that you can pass to map in this sort of
higher Ro
relationship you do get information you
get a reference to the array itself and
you get a reference to the index of the
the item that you&amp;#39;re mapping over you
could if you wanted to if you really
stupid use that to mutate the actual
original array so you can technically do
it but you&amp;#39;d be an idiot if you did
right so for each janaka says um uh
mutates the original in fact before we
go to mutating Mark has said something
really interesting as well which is also
correct which is one of the beautiful
things about map is that being a higher
function and being more of the
functional
programming aesthetic that&amp;#39;s the wrong
word but anyway I&amp;#39;m going to use it in
JavaScript it allows us to change
because the it it
produces this new array so you you you
map over an array and it produces an
array in fact Let&amp;#39;s Do It Let&amp;#39;s Do It
Let&amp;#39;s Do It um node node um const a
equals and notice I&amp;#39;m using const right
sort of to sort of underline oh my God
849 to under line that we&amp;#39;re not going
to be mutating this we can&amp;#39;t mutate it
if it&amp;#39;s a constant 1 2 3 right let&amp;#39;s do
that a do map right um x x um
plus 10 right and so if we run
that uh use an anonymous function as the
single parameter to map there are there
are other anyway that&amp;#39;s not even go
there that&amp;#39;s what happens right what
happens
there so it produces something now going
to
Mark&amp;#39;s um comment here which is also
very correct and very important for each
is not chainable so if I wanted to say a
do map um and then dot filter and but
only show me the ones that are where X
is less than
um 12 for example there okay so we can
we can sort of chain functions together
in a beautiful way now if we were to say
a do for each
x x um +
10
right it doesn&amp;#39;t spit anything out so we
couldn&amp;#39;t then change something on here
filter you know cannot read properties
of undefined you know the we get
undefined from the for each so we can&amp;#39;t
chain these things
right and um it&amp;#39;s it&amp;#39;s immutable but if
we were to say VAR b equals
456 B do um uh B do4 each x x +
10 456 that doesn&amp;#39;t uh mutate either
however and we&amp;#39;ll I don&amp;#39;t I don&amp;#39;t want
to go into this in too much detail for
each can and does
mutate right in fact let&amp;#39;s let&amp;#39;s go into
it really quickly right and I&amp;#39;ll say
very briefly the reason
why we&amp;#39;re not mutating these values here
is because these are primitive values
like booleans uh integers strings for
example are primitive values and
function calls in JavaScript are pass by
value okay yes exactly VA says uh for
each always returns undefined exactly um
so if we but if we were to have um far
um C equals um I don&amp;#39;t know ah color
red um
color blue right for example there and
then we we would to say C do for
each uh x x dot in fact in fact let&amp;#39;s do
map first map let&amp;#39;s let&amp;#39;s clear the
screen
uh there there C so if we say C map um x
x. color let&amp;#39;s just get a list of the
colors there red and blue okay if we
were to say for example uh x. color
equals uh different
color we would get that okay um which is
also fine however if we were to say x uh
C dot for each x x.
color equals a new
color check it out we&amp;#39;ve mutated the
original
now let me know in the chat if in the
next episode we want to go a little bit
deeper into this and why this happens to
objects and why this doesn&amp;#39;t
happen
to uh oh be sorry to um to Primitives
okay and what that effect has on things
like this it it we need to understand a
little bit
about this to properly understand what&amp;#39;s
going on here right does that make sense
anyway before we
go before we go six minutes left what I
want to do is talk a little bit about
and that&amp;#39;s also by the way why and again
we need to I think we need to understand
this because it&amp;#39;s really important why
this is working because we&amp;#39;re not
returning anything here are we we are
not returning anything even if we did
oops it would be exactly the same right
it would have no real new effect look I
love I love the listening plugin because
it&amp;#39;s only going to request it now there
that um it&amp;#39;s the same thing we don&amp;#39;t
really need to do the return we should
normally if we want to pass information
back from this Co this Anonymous call
back function when it&amp;#39;s defined in curly
braces you know nothing&amp;#39;s actually
returned so what is happening but before
we do anything else so Dwight says the
this on read is intercepting the request
before the data are actually read
whereas this after read the data are
actually available thus the anonymous
function can operate yes you absolutely
Dwight is absolutely
right but I think I&amp;#39;m I&amp;#39;m I&amp;#39;m what I&amp;#39;m
more focused on
here what what Dwight says is 100%
correct and not in dispute here at all
right um what I&amp;#39;m saying
is why
does doing a map for example that
returns something but we&amp;#39;re in a in this
code block here which means that there&amp;#39;s
nothing passed back from this Anonymous
function so how can we even affect the
data that&amp;#39;s coming
through why does that
work okay that&amp;#39;s what we&amp;#39;ll I think we
do need to look into this next time let
me know in the chat if you want to look
into it next time so Mark says um for
your information if you use uh sap XS
security don&amp;#39;t use V before wasted my
hole yesterday as there&amp;#39;s a bug in it
thank you Mark that&amp;#39;s very nice uh visas
I guess because array is passed by
reference we modify value in the memory
of that array visas has got it visas has
got it now we want to unpack what visa
says next time I think by some simple
examples uh here uh if you want to do
that let me know okay so uh Kiara says
complex objects are passed by reference
yes exactly exactly exactly so uh some
of you are getting it already which is
beautiful right so Michael says objects
in JavaScript are uh again I need to see
what say uh are references like points
into yes well yes they are references
but function calls are passed by yeah
okay brilliant brilliant so you&amp;#39;re with
me you&amp;#39;re with me you&amp;#39;re with me you&amp;#39;re
with me
now what I want to do here is just
explore a little
bit uh logger let&amp;#39;s log the data right
let&amp;#39;s do
that come on come on come on there we go
okay
perfect
so what do we get logged out we
get with our little cap B2B log of
prefix cool we get an array of
objects okay now if we were to
say each here let&amp;#39;s just whack it in
right before thinking about it let&amp;#39;s use
that example that we saw somewhere here
right
uh where was it
um I can&amp;#39;t remember where it was now uh
there maybe each doesn&amp;#39;t matter doesn&amp;#39;t
matter doesn&amp;#39;t matter
um now I&amp;#39;ve just changed read to each a
magic
word if I save
that we get the same
response but check out what have we got
what&amp;#39;s the difference over here we get
get not one log record with an array we
get three log records each with not an
array but a single
object okay this is a convenience
function it used to be that this
happened uh when you put each here and
when you actually
named it still does actually I think for
compatible backwards compatible oh maybe
it doesn&amp;#39;t data is not oh sorry logger
uh each there it&amp;#39;s for backward
compatibility reasons that still works
but we shouldn&amp;#39;t use that approach okay
um we should
instead use that approach now I&amp;#39;ve
written about this
inh where is
it each where is it there blog post
defining a custom after handling cap so
that there describes what I&amp;#39;m I&amp;#39;m
rushing
through and what you should do okay so
basically tldr there&amp;#39;s a special
behavior if you using each parameter
name when defining an after Handler but
the way this works and the way you
should invoke it has changed okay so
check that out as well and we&amp;#39;ll dig in
a little bit more and do some cool
things with an after Handler uh I think
we might going back to what Daniel said
he gave me the idea that we could Define
a virtual property a virtual element in
our books for example
so that we don&amp;#39;t have that persisted in
the database we just have it computed on
the Fly there&amp;#39;s another ex there&amp;#39;s
another another way you can use the
after Handler to sort of compute values
okay and put those values in a virtual
element that doesn&amp;#39;t get persisted but
gets exposed in the O dat service right
I hope that was okay
um no live stream next week because I&amp;#39;m
doing a code Jam but let&amp;#39;s do this let&amp;#39;s
carry on the week after um and isan good
morning and over there we go uh so uh
watch the live stream replay is isan
isan sorry isan and Dwight great stuff
thanks DJ wez thanks DJ and every one ni
session Amy thank you all Kaz kazazis
and yeah okay goodbye have a great
Friday have a great weekend and see you
soon bye