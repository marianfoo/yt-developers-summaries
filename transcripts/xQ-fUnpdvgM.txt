e
good morning good afternoon good evening
welcome to Hands-On sap Dev with me DJ
qro here again Friday Friday morning my
time but uh good evening good night
first of all first of all I&amp;#39;ve got to
say Anand Anand is saying good morning
from Philadelphia Phil what time is it
in Philadelphia but it&amp;#39;s 3:00 a.m. in at
3:00 a.m. or something crazy so thank
you for joining from Philadelphia good
morning also to door of the future who
was on earlier and said he was
ttoa uh already ready for learning uh so
that&amp;#39;s great I think uh that&amp;#39;s a great
attitude to have VZ good morning to you
in Bangkok Thailand good afternoon to
you sorry I&amp;#39;m um I&amp;#39;m glad you&amp;#39;re able to
join the live session um H and what did
you say here I&amp;#39;ve got I&amp;#39;ve got two I&amp;#39;ve
got two chats got Chats on the main
screen and got chat down here as well um
to sck down here um you said that you&amp;#39;re
unable to join live session after Miss
Part 12 due to my personal work well I
hope you managed to catch up okay and
welcome back visus Antonio good morning
to you in Madrid and rrick good morning
to you and nitesh good morning to you
good afternoon to you in India zahed uh
good morning to zahed in sunny suly hle
it&amp;#39;s very sunny here actually um it is 3
3:00 a.m. 3:00 a.m. in the morning a
little bit torical but anyway uh sorry
what I&amp;#39;m saying is torical 3:00 a.m. in
the morning a.m. anti meridium before
midday sashan good morning to you in
valdor sunny valdor and jell good
morning to you in Kenya and bonjo kazis
and Casten good morning Caston to you in
Strut fantastic it&amp;#39;s great to have you
all um oh and chanit good morning to you
in einhoven
fantastic fantastic it&amp;#39;s great to have
you all and
um I&amp;#39;ve got my coffee morning good
morning helmet long time friend of the
channel helmet Tam in Brunswick brag in
Germany
um uh so in fact uh for those of you who
uh are not aware Helm remind me if I
forget be worth showcasing your uh
saadon bot uh which is really cool which
will also encourage people to come over
to the fediverse if if you&amp;#39;re uh if you
know if you&amp;#39;re into uh micro uh tweets
or tootes or what&amp;#39;s the what&amp;#39;s the
what&amp;#39;s the thing I can&amp;#39;t remember anyway
um what&amp;#39;s the micro
posts I don&amp;#39;t know anyway yeah
uh so helmet has put together a really
cool uh little bot that will tweet out
or toot out rather on masteron on the
FSE uh new versions of uh packages such
as Sap&amp;#39;s cap uh package CD SDK toot toot
yes toot thank
you I&amp;#39;ve got my coffee here it&amp;#39;s quite
bitter I&amp;#39;ve made it a bit too strong U
it&amp;#39;s my second coffee as well so if I go
a bit crazy uh that&amp;#39;s the reason why so
rill hi DJ very excited for today for
today&amp;#39;s session this series is more
excited to watch on any Netflix series
yes I&amp;#39;ll take that thank you R thank you
romil uh I will&amp;#39;ll try and make it as
exciting as we can in fact let me jump
to uh the main where are we the main
scene um in fact yeah let me go let jump
to the main scene and
um I was just browsing lobsters this
morning while I was waiting to go live
and everything um but here as you as you
know sap go to sap tips this is where
we&amp;#39;ve done this before but this is where
you you can go and find the links to all
the different things that we mention in
every any given episode so here&amp;#39;s the
live stream here&amp;#39;s the YouTube thing
that&amp;#39;s me let&amp;#39;s put pause otherwise it&amp;#39;s
going to be a bit crazy um Marian good
morning Sunny sunshine in Marian&amp;#39;s
little message there as well fantastic
um so if you have a look at the
description here you&amp;#39;ll see links to all
resources Shar in this episode are to be
found in the comments here I like the
way uh you know I did think about hard
about are to be found because I that is
valid for before the live show goes out
and after the live show has gone out so
Michael good morning to you in in schit
in Switzerland really appreciate your
work thank you really appreciate you
being here Michael thank you everybody I
appreciate everybody so and you can
click on this thing here and this will
go to um the sort of the
event on the on the Sab Community
platform and then I always add a little
comment and I&amp;#39;ve I&amp;#39;ve sort of pre-loaded
this one with a few things that we
probably want to have a look at
so uh without further Ado we&amp;#39;ve got the
sap developer news we don&amp;#39;t need to go
in that right now um these April I think
since we were together last time the
April release of uh cap has come out uh
that is here of course uh April 2024 and
there&amp;#39;s lots of really juicy things
maybe we&amp;#39;ll try one just because because
this is this episode episode 13 I&amp;#39;m not
around next week I&amp;#39;m on holiday on
Friday next week and the week after
um I&amp;#39;m
hosting if I go here and go to Sab
developers the week after uh live or is
it upcoming live streams so we have the
wonderful Norah and Kevin on the 24th so
that&amp;#39;s the week after next I&amp;#39;m not
around next week and the week after the
Friday there&amp;#39;s a hands onb Dev live
stream uh but it&amp;#39;s won&amp;#39;t be on the Back
to Basics we&amp;#39;re going to do a special
episode on uh retrieve uh retrieval
augmented generation which is going to
really cool um and then after that blah
blah blah blah so this is this is going
to be the last episode for a couple of
weeks at least so you know we&amp;#39;ll have a
little bit of a you know end of term
thing you know we&amp;#39;re going to continue
the back to basic series do not fear um
so yeah anyway DJ stop talking um so
that that&amp;#39;s that that&amp;#39;s that that&amp;#39;s that
um and oh yes so uh yes but now we can&amp;#39;t
live without DJ at Friday says Dwight oh
that&amp;#39;s very kind of you to say so um but
um too much of anything is uh is not a
good thing so uh maybe you need a break
from this uh Stupid brain here nil good
day to you in Melbourne good evening you
have brilliant I have a glass of wine
before DJ asks I was going to ask make
sure you got a glass of wine got a glass
of coffee it&amp;#39;s a little bit too early
for wine here well my my grandpa used to
say uh it might be too late but it&amp;#39;s
never too early there we go
so um what uh we developer Advocates
have started to sort of dip our toe in
the water with are YouTube short so you
can you know get your phone get your
mobile phone what&amp;#39;s it your handy as
they call it in Germany and look at
things in portrait small phone format
and we&amp;#39;ve got a new little playlist it&amp;#39;s
very very um you know very very small at
the moment just a couple of shorts so um
we got shorts on uh cap node.js little
good to no shorts so check those out
there um and finally be so just allow us
to sort of dive into where we were
before where we were
before um was we just
started last week right at the end and
we left on a cliffhanger I think uh was
it um was it red uh red cape said yes
what a cliffhanger and uh we had some
great input from the subscriber and also
from a long friend of the channel Matias
uh uh
lempa about what we should be doing okay
so I was trying to resist doing stuff
Raphael good morning to you good morning
Raphael so we&amp;#39;ll come back to this in a
second where we were and what was going
wrong and what was not working and
everything um but the way we were
testing what we were
doing was we were making changes to the
main JS remember that we&amp;#39;ve got our main
CDs here which is the super simple
Bookshop service with the three entities
that were
exposing that&amp;#39;s sort of you know less
important now what&amp;#39;s more important now
is that we have a main.js file in the
same directory right next to it um and
it&amp;#39;s got the same name main dot just
with a different extension JS and that
then is automatically picked up by the
cap server convention over
figuration to
become um that that is sort of loaded as
a
module uh and you&amp;#39;re expected to provide
or this is how you would provide
handlers custom
handlers to replace or
augment the default handlers that happen
automatically for us for any sort of you
know crud style operations that come in
events that come in right we covered
that last week
so as you can see that&amp;#39;s just a quick
reminder we&amp;#39;ve just got a few console
logs here to sort of figure out what
happens when and what gets called when
so i&amp;#39; liter now here clear um let&amp;#39;s just
CDs watch and we get uh
here hello world we get that hello world
from that console log there and then
also we get the I am in the anonymous
function which is just here so this is
inside this Anonymous function
that is exported from this module when
it&amp;#39;s loaded okay so cap server starts up
it sees uh you know the main. CDs it&amp;#39;s
starting serving the main. CDs and it
says oh yeah I&amp;#39;m serving Bookshop which
is in there let&amp;#39;s just bring that there
like that right there Bookshop is my
head at the top my head at the
bottom um so serving Bookshop serving
Bookshop path o dat that&amp;#39;s the default
path okay you can change that if you
want to we&amp;#39;ve done that already in a
previous episode and then it says oh
yeah oh I found an implementation I I
found a custom implementation file serve
main JS because of course the name
convention right so that&amp;#39;s why this is
loaded but of course we don&amp;#39;t get uh the
handling read of books written out to
the console yet because we haven&amp;#39;t
actually caused a read event to happen
on the books entity right and so what I
was
doing um was going over to this other
terminal and saying curl silent you know
so we don&amp;#39;t get that sort of you know in
fact let me do it with the silent first
so you can see when I use silent what
disappears so curl
Local Host 404 o data V4
Bookshop books and PPE into JQ as we
always do because it looks nice okay
we&amp;#39;ll do that and um what we get a
number of things happening so the reason
why uh we get this this is by you get
this by default in curl so this is why I
say uh clear
minus s or minus minus silent all that
does is suppress that sort of progress
thing there okay so you know about that
already and what we also see is you know
a log from the odata protocol Handler
the standard Handler to handle incoming
OD data requests and of course this is a
an OD data query operation because we&amp;#39;re
asking for an entity set
okay and that causes the read event that
that that causes the read event to be
fired inside the cap server which means
that this Anonymous function here that
we&amp;#39;ve defined literally the thing I&amp;#39;ve
highlighted there that Handler that call
back in you know different terminology
gets called because a read event has
been emitted because of the incoming
odata query operation that&amp;#39;s being
handled by the odata part of the cap
server
right and it&amp;#39;s for the books entity
right
now where we finished just about where
we finished last week was okay console
log handling Reader books but we don&amp;#39;t
get any
data okay
now in order for us to um more
comfortably progress and hack around on
this and have
things be requested when we make changes
to see what happens what we could do is
do uh a regular sort of you know
when um when uh this changes so we can
say list using the ENT we&amp;#39;ve used ENT
before haven&amp;#39;t we we used ENT before in
fact
ENT uh there we go a run arbitary
commands when files change let&amp;#39;s add
that to the thing
here
uh I know we&amp;#39;ve done it before but let&amp;#39;s
add it there as well
ENT there okay fine save that post
okay uh where are we here there we go uh
so we can say um list uh serve anything
if we change anything the serve
directory just files uh ENT clear screen
and because we want to put a pipe in the
thing we got to you know say send it as
a string to uh bash and say um curl
minus s local say I always type low l
cap when I&amp;#39;m typing fast host 44 data V4
Bookshop books pip JQ like that okay so
if I save that
now okay that&amp;#39;s fine it&amp;#39;s restarting
okay but sometimes sometimes sometimes
sometimes the and this is generally okay
sometimes sometimes sometimes the cap um
server restart takes a few seconds and
this has already been triggered this new
request has already been twigger twigged
twigger before the cap server is
restarted so either you get the results
of the call being handled by the old
version before it&amp;#39;s saved and restarted
or actually the call is
made while the cap server is restarting
okay because you know these two things
are
independent okay so instead what you can
do is what you could do is have a little
sleep so we could say here for example
you know um actually see uh
sleep for semicolon and then run that
okay sleep sleepy 1 2 3 4 and then call
it okay yes you could do that however
what I thought was this is a really
cool circumstance where we can use
something to do with the cap server
which are called life event so the cap
server itself has a life cycle you know
it starts up it gets ready it starts
listening and then it shuts down when
you control see it and everything so
what I&amp;#39;ve done is I&amp;#39;ve written a little
blog
post um oh I just seen a question here
I&amp;#39;ll answer that in a second Rafael I&amp;#39;ve
I&amp;#39;ve written a little blog post um did I
put in here already uh yes okay
controlling automatic htttp requests
incap no. JS design time Loops okay so
that&amp;#39;s Linked In this thing already we
won&amp;#39;t go into this we can read this
after the uh live stream but basically
this tells you about life cycle events
and what we can do is use this bit of
code here it&amp;#39;s really simple um if if we
say here um let&amp;#39;s go into here and say
new uh paste that in and save that
as server.js so it&amp;#39;s a it&amp;#39;s a well-known
name Convention of configuration so if
you
save a file called server.js the caps
server itself will say oh there&amp;#39;s a
custom implementation for to enhance me
myself the server so as you can see it
says here loading server from file
server that&amp;#39;s a new message and what
we&amp;#39;ve got here is really simple we don&amp;#39;t
have to sort of stare at this stuff too
long but basically I&amp;#39;m loading I wish
those tool tips would go away good
morning Javier good morning to you in
Sunny Barcelona um I&amp;#39;m just using the
the promise version of the uh the file
system library in node and what I&amp;#39;m
doing is I&amp;#39;m requiring sap
CDs which gives me everything this is
this this uh this CDs facade and then I
can call an on to register a Handler
which is
here
there for the listening event the
listening is a life cycle event which is
fired when the cap server has started up
and is ready ready to start listening
for incoming requests in the with the O
data protocol right now so what we can
then do is to say oh just I&amp;#39;ll just
write a file an empty file called
listening so then what we can do is we
can say ah right now um where is it
uh yeah okay so now sorry um what we can
do is we can say
here instead of listening to changes to
stuff in the serve directory we can uh
we can listen listen literally listen
out for changes to the listening file
right and then
oops uh let&amp;#39;s get rid of
that and
then the enter will only trigger when
the listening file is changed and that&amp;#39;s
changed when basically the listening
event is fired so now we don&amp;#39;t have to
sleep we don&amp;#39;t have to worry that this
will be called either too early or
during the server startup and then it
will fail so now and in fact what we can
do as well just to show us that um let&amp;#39;s
let&amp;#39;s get it to print out the date as
well date date and time okay let&amp;#39;s do
that so
71823 that&amp;#39;s you know UTC time I&amp;#39;m an
hour ahead of that if I save that now
notice that this doesn&amp;#39;t get fired
straight away it gets fired 10 seconds
you know a a few seconds after do that
again
save 39 okay so now we&amp;#39;ve got a very
very comfortable way of having a request
made again once we make some changes
does that make sense put it in the chat
if that makes
sense so rafhael says um God that is
very bit that copy today is there a
reason for providing the service name as
a string instead of importing it by
doing const books equals this entity ah
brilliant Raphael um there is the reason
I&amp;#39;m using it this way so Raphael is
asking why have we got this in as a
string okay what we could do is what
Raphael says in the chat which uh is to
bring that in as an
object from the entities okay um the
only reason I&amp;#39;m not doing it that way is
because I want to do that in a later
episode that&amp;#39;s all so great Point
Raphael and it&amp;#39;s really nice to be able
to do that but I just want to keep it as
simple as possible right now to sort of
not distract
from what we want to look at okay so
yeah so we&amp;#39;ll leave that for a future
episode if that&amp;#39;s all right with you
okay now now we&amp;#39;ve got something that&amp;#39;s
listening um on the listening and we&amp;#39;ll
only rerun when we change this and it&amp;#39;ll
rerun the right time now let&amp;#39;s start to
have a look at what we did what&amp;#39;s
happening at the moment is that we&amp;#39;re
getting no
data what happens what happens if
we comment that out okay comment the
registration of this Anonymous function
as the Handler for the read request on
books okay let&amp;#39;s save
that we get the data why do we get the
data Sunny hello hello Sunny to you we
get the data why do we get the data
because we&amp;#39;re
not you we&amp;#39;re not
registering a
function a Handler function for the on
event we&amp;#39;re not saying I would like to
do the handling of the read of books
myself
okay good morning to you in India Mumbai
India and rajie good good morning to you
as well okay now where we were last time
at the end um we were saying like oh
yeah well let&amp;#39;s let&amp;#39;s just have a look
at this and I was trying to sort of not
do this because this is what I want to
cover
today what we have is in the on function
when we register a Handler for the on
event okay which is different to the
before and the after which we&amp;#39;ll come up
to you
later this function gets ped two
arguments okay and we want to capture
those two arguments in two different
parameter requ sorry uh the request and
also next now what does that mean before
we have a look at what that means let&amp;#39;s
use it which was what we did or what we
tried to do last time okay handling read
of books and what we did was call next
okay was the next that we get is a
function okay so let&amp;#39;s let&amp;#39;s think about
in fact let&amp;#39;s think
about next as a function without
thinking about the other parameter the
other argument that we get past for this
parameter so we&amp;#39;re going to give the
we&amp;#39;re going to specify the name of the
first parameter as an underscore and I I
knew I was going to do this so what I&amp;#39;ve
got here as well is a little reference
if you&amp;#39;re wondering why people use
underscores as function parameter names
there&amp;#39;s a really good question and
answer on stack Overflow for that okay
so have a look at that but basically
it&amp;#39;s a little little bit of a a
placeholder to say yes well you know
we&amp;#39;ve got to acknowledge this this
parameter because we got positional
parameters comma separated positional
parameters so we got to put a name for
it but that implies that I don&amp;#39;t care
about it I&amp;#39;m not going to use it okay
does that make sense so that&amp;#39;s what I
think that&amp;#39;s what we did last week as
well so I wanted to explain that now
next next is a function
and if you think about how uh certain
mechanisms certain classic mechanisms
work uh the one I always think about is
the Apache web server httpd which is
basically the web server that powered
most of the web as you know in the early
days and the way that it worked is that
a request came in and it started to
handle the request and you had a series
of stacked handlers okay so the request
went through the
handlers the first Handler had a had a
chance at handling that request and it
might have wanted to partially handle it
but then allow a subsequent Handler to
continue the handling of that request so
it would say yeah I&amp;#39;ll do a little bit
and then I&amp;#39;ll give it to the next
Handler and the next Handler might do
the same thing and then the Handler
after that might say oh actually you
know I am the definitive final Handler
now so I&amp;#39;m going to add my bit to
handling this incoming request that&amp;#39;s
sort of running the gauntlet through
these
handlers okay and then that Handler
might say that&amp;#39;s it no other subsequent
handlers should be called I you know I&amp;#39;m
the final Arbiter on this particular
request so I&amp;#39;m not going to call next
I&amp;#39;m not going to
allow any further progress through the
stack of handlers okay and then it would
then return the response to the you know
the the web request that was made and
you know it&amp;#39;s all good we have a similar
sort of philosophy approach mechanism
here so basically inside the cap
server with this next
function we get given the next function
as a Handler so we could start handling
the request and then call next to say
well you do the rest of it
okay and that&amp;#39;s sort of sort of what&amp;#39;s
Happening Here however however however
however so we&amp;#39;re basically saying I
would like the next Handler in the
series and the next Handler in the
series is sort of think about it
as similar to what we I just just
described and it it will do the handling
for us okay if we don&amp;#39;t want to do it
after
all however as we can see here it&amp;#39;s
still not working okay why is it not
working now this is not as it it&amp;#39;s still
not working IE we&amp;#39;re still getting no
data can anybody say in the chat why
we&amp;#39;re still getting no data now um I
think it was it the subscriber or Matias
said right at the end last week but in
the chat what you why you think was
still getting no data even though we&amp;#39;re
calling the next Handler okay in the
series which
should handle it for us okay we should
provide the
data put in the chat um Michael says
shouldn&amp;#39;t the value of next be returned
yes and that&amp;#39;s what I think a couple of
folks said on the previous thing so
nikel says does the Handler function
have to return the p in entities um yes
it well the um this particular one n
that&amp;#39;s a really good question um so
great great answer from Michael we&amp;#39;ll
look at that in a second um but nikel is
saying does the Handler function have to
return the past in entities yes
but in this particular Handler function
which we registered against the on event
okay or the on call back type we don&amp;#39;t
get any data passed in because
effectively the on is
you get the data as in I want to get the
data okay in the
before or the after yes we get uh well
sorry let&amp;#39;s talk about the after for now
with the after we do get data passed in
to say here&amp;#39;s the data that&amp;#39;s been
retrieved but you want to you&amp;#39;ve
registered this call back to to add
something to the data to enhance it
maybe you know in after scenario so
here&amp;#39;s the data so yes the handle
function have has to return the pass in
entities
in that um in that context but it&amp;#39;s only
for example the after function that gets
uh past the entities right does that
make sense nikel let me know if that
makes sense but let&amp;#39;s go back to what
Michael says yes we have to return the
value of next but why do we have to
return the value of next if we say here
return it&amp;#39;s not really yeah it&amp;#39;s
basically
returning the the result of calling next
okay perfect nikel thank you for
answering that&amp;#39;s brilliant so Niki
saying a good example here asking a
great question in the chat and and also
acknowledging as well so I&amp;#39;m I&amp;#39;m I know
I&amp;#39;m not sort of talking nonsense so if
we save this now all I&amp;#39;ve done is add a
return
statement okay so we&amp;#39;re loading file so
and then this is this one&amp;#39;s still
waiting here which is
great there we
go now why has that made a difference
why has that made a difference I&amp;#39;m going
to tell you that&amp;#39;s actually nothing to
do with cap or the cap server or CDs or
anything why do you think that is if we
remove that again and save
it it breaks again I.E we don&amp;#39;t get the
goodness from this function that we we
were given as the second parameter in
the call back when we were called okay
why is that well maybe somebody&amp;#39;s going
to put in the
chat have a think about and I think I
might have put it in here yes Arrow
function Expressions there we
go one of the beautiful one of the so
es6 ecmascript 6 came out in node.js
JavaScript quite a few years ago and it
brought with it a lot of beautiful
things to JavaScript it also brought in
a lot of ugly things to JavaScript
including
classes and I&amp;#39;ll say that again it
brought a lot of ugly things into
JavaScript including
classes however one of the things it did
bring in is this concept of Arrow
function expressions or fat Arrow
functions and a fat Arrow function
basically let&amp;#39;s go
here is a really nice way of defining
a an anonymous function in a really
succinct
way can we illustrate this by um by
doing
a yeah let&amp;#39;s do let&amp;#39;s try this uh if we
go into here let&amp;#39;s open node if we have
for example um numbers equals 1 2 3 okay
if we say
numbers
map okay uh oh sorry numbers. map and we
want to do something to each of the
numbers so either we could say function
I think
X return x uh time 10 right like
that see what happens there we go so you
know we multiply each of the numbers by
10 right but that&amp;#39;s quite
verose okay and when you start thinking
about developing in JavaScript in
node.js
JavaScript in this style where you have
a lot of callbacks a lot of handlers a
lot of anonymous
functions the fat Arrow function
style an arrow function expression is a
compact alternative to a additional
function expression so this is a
function
expression we could write this in a
similar way sorry we could write this in
a different way using a fat Arrow why do
I call it fat Arrow function because it
that that&amp;#39;s an arrow right that&amp;#39;s an
arrow make it a bit
bigger and and that to me is a fat Arrow
okay that&amp;#39;s why I and other people call
it a fat Arrow
function now we could say numbers do
map and we&amp;#39;ll use now what&amp;#39;s it what&amp;#39;s
the official term an arrow function
expression
x x *
10 there we go now
notice that as well as not having the
function keyword we don&amp;#39;t have any
return statement we don&amp;#39;t have any curly
braces we don&amp;#39;t have a block we could
have a block but if we put a block in
there as in a block constrained by curly
braces x * 10 right Watch What Happens
undefined undefined undefined
if we put something in a fat Arrow
function
style Anonymous function
definition if we put something inside of
a block like this a brace enclosed block
we&amp;#39;ve got to use the return
statement okay and it says here where
does it say I&amp;#39;ve even put it in the
thing I
think the braces can only be emitted if
the function directly returns an
expression if the body has additional
lines of processing the braces are
required and so is the return keyword
Arrow functions cannot guess what or
when you want to return okay so let&amp;#39;s
just think about that and look at this
again so because we put this in braces
here we&amp;#39;ve got to use the return
statement but if
we like that right uh but if we do it
that
way no braces we don&amp;#39;t need a return
statement basic the valuation of that
expression is the thing that&amp;#39;s returned
now let&amp;#39;s think about that and go back
to what we have here right so we&amp;#39;ve got
our Handler registration the on Handler
registration for the read event of the
books entity and here is
our function our Anonymous function
definition okay then there
is what I call the function signature I
don&amp;#39;t really know what that&amp;#39;s called but
basically the the list of
parameters there&amp;#39;s the fat arrow and
look we&amp;#39;ve got a
brace which
means that unless we use the return
statement nothing that&amp;#39;s done in here is
returned so we&amp;#39;re returning nothing so
we&amp;#39;re getting nothing here does that
make
sense um so Sunny says I am planning for
practice uh cap M but getting error in
both B and vs can anyone help me here to
fix the installation part um we Sunny
I&amp;#39;m sure we can but you need to supply a
little bit more information and probably
it&amp;#39;s better to ask that on the sap
Community or in LinkedIn or somewhere
stack Overflow wherever ask it where you
can supply some detail okay so Carson
says if you want to return a Json object
you can put it in curly brackets value
colon X yes for example that uh you need
to return exactly exactly I think this
also a
syntax um if I wanted to say um I wanted
to return an object like value x * 10
what Carson&amp;#39;s saying
here that is not really what we want but
I
think there we go if you can still have
a a braceless a block
expression but if you enclose that
expression which in this case with
Carson&amp;#39;s example you want to have an
expression which returns an object with
a single property the key of which is
value and the value of which is the X x
10 then you can put it in normal
brackets and that still works and it&amp;#39;s
still outside of or not in this block
style brace block style syntax does that
make sense uh so cast Andel okay oh oh
nice so helmet says helmet says that&amp;#39;s
why I love this YouTube channel we get
this detail information fantastic but
I&amp;#39;m also I&amp;#39;m also suddenly conscious ah
we&amp;#39;re supposed to be back to basics cap
but it&amp;#39;s really important right because
we&amp;#39;re going writing a lot of we just
love DJ wherever he is heart oh thank
you Marian I love you too I love you all
um uh so V says DJ explains the AR
Expressions fantastic well I&amp;#39;m glad I&amp;#39;m
glad you&amp;#39;re okay with this because I
think it&amp;#39;s really important to
understand what is going on now let&amp;#39;s
just let&amp;#39;s just wrap this little bit of
a digression digression me never let&amp;#39;s
wrap this little bit of a digression
up by doing something a little bit
interesting hopefully let&amp;#39;s remove this
console log statement we don&amp;#39;t need
that it stands to reason doesn&amp;#39;t it that
okay if I save that it&amp;#39;s still going to
return an empty entity set value open
close brackets
okay but knowing what we know now let&amp;#39;s
put that on the same line for now
knowing what we know now if we were to
remove the
brace Block in this Anonymous function
definition this fat Arrow function
definition like
that so all I&amp;#39;ve done is remove the
brace which removes
the requirement for the return
keyword save that what you think is
going to
happen oh so ah okay I&amp;#39;m just I just was
doing the thing that I think Michael is
describing if I glanced at it just then
uh you okay what are you saying you
theoretically could remove the braces
and build a custom Handler which just
calls next with an implicit return
question is why you would need that in a
custom Handler Michael you are on it
like a car Bonet as people say somewhere
I don&amp;#39;t know um maybe uh maybe
um I don&amp;#39;t know anyway so basically I
think what Michael is describing is
exactly what we&amp;#39;ve just tried here I
mean there&amp;#39;s no reason we would do this
apart from to sort of explore the juicy
goodness of what the heck is going on
here so can you understand what&amp;#39;s
Happening Here we are still calling next
that we get
past
but we&amp;#39;re calling it and returning the
result of calling it implicitly because
we&amp;#39;re not you know because we&amp;#39;re using a
fat Arrow syntax without braces okay
right right right
right what we could do and this is crazy
but um I think somebody
said um ah well oh Nikki lost that
question and it reminded
me to I&amp;#39;m going to have drunk that
coffee is so got some
water
okay it reminded me that just before
moving on because I want to I want
to do I want to move on to uh to the
maybe an after Handler and make should
we do some should we do some debugging
next just a toe in the water of
debugging this to see what this
parameter is okay to have a look what we
get past we could read the documentation
yes but we can also help
ourselves by running stuff in debug mode
and then looking at what we get okay let
me know if you want to do that or let me
know if you want to move on first of all
to the after and start playing around
with some data okay if you don&amp;#39;t say
anything then maybe we&amp;#39;ll do the
debugging first I don&amp;#39;t know I&amp;#39;m just
thinking out loud but before we do that
let us
do one more crazy
thing okay we
could return let&amp;#39;s let&amp;#39;s do this in
braces right so let&amp;#39;s do that
um there like that
return like that okay and in fact
because we&amp;#39;re
returning okay we&amp;#39;re returning something
what we&amp;#39;re returning is actually an
empty array which is basically sort of
going to confuse us because we get so
Kaza says let&amp;#39;s go for debug okay
perfect thank you Kaza thank you for
confirming that we you know because
we&amp;#39;re not using either this thing that
we&amp;#39;re not interested in or we&amp;#39;re not
calling next so actually what we can do
is go back to saying well you know yeah
maybe there are some things passed to
this callback function but we don&amp;#39;t care
I don&amp;#39;t want to capture anything I don&amp;#39;t
want to specify any arguments to capture
those parameters that passed sorry I
don&amp;#39;t want to
specify I always think about
what words to use and in my brain the
things that appear
here those are what I call parameters
and the things that get passed and get
captured by these parameters by the
calling function by The Calling thing
are the arguments I don&amp;#39;t know maybe I&amp;#39;m
wrong but anyway so if we do that we get
that now we could say something
crazy
that okay now what&amp;#39;s
happened what the what the the returning
mechanism that then get kicks in after
we&amp;#39;ve sort of overridden the standard
handling it tries to sort of turn what
we have supplied
into the the JavaScript object the Jason
yeah yeah the into the structure that
sort of represents an entity set which
is array of objects okay so 1 two 3 is
completely Bonkers why would you return
an array of numbers so let&amp;#39;s do this
okay so we could say return um just two
empty
objects and now we get two empty objects
and now we get it because we put some
empty objects there that if that makes
sense um so um so and let us explore the
woods it&amp;#39;s like let&amp;#39;s explore the woods
I like that I like that and let&amp;#39;s
explore the woods especially in
Philadelphia fantastic
um so can you see what we&amp;#39;re doing here
so we are
overriding the standard Handler right
which is different to what we probably
normally want to do we normally want to
just enhance or add bits to or modify
stuff as it passes through the default
handlers and in that case we want to use
a before or an after mostly an after
because we want to enhance the data
that&amp;#39;s already been received before is a
before Handler is more for or maybe
doing some specific checks to see if
whether the request should be handled in
the first place or not we&amp;#39;ll come to
that
later so we could say we could even say
here return you know um what&amp;#39;s the thing
ID uh oh tell you what let&amp;#39;s let&amp;#39;s do
let&amp;#39;s do this let&amp;#39;s go to there and have
another should I have another thing here
let&amp;#39;s just you know this is this is
especially for visas let&amp;#39;s use
compile
pile uh to yaml DB data what&amp;#39;s it called
DB schema. CDs okay so we can see
here that where is it um books has an ID
we could have just looked in the in the
scheme. CDs but you know that&amp;#39;s boring
so we can see the we&amp;#39;ve got an ID a
title and an author thing okay so the ID
is a u ID right so why don&amp;#39;t we say ID
um well some U ID I don&amp;#39;t know I&amp;#39;m just
going to make something it&amp;#39;s not U ID
but then
title the title and then we but we but
what we do here in terms of the let me
that there in terms of what we need to
think about in terms of the entity set
the entity set that you know that we&amp;#39;re
returning data for is at the service
level not at the schema level so let&amp;#39;s
have a look at the
serve there and here we see um where is
it uh let&amp;#39;s have look it&amp;#39;s quite hard to
see in
um tell you
what let&amp;#39;s do it let&amp;#39;s no let&amp;#39;s not do
let&amp;#39;s not do it there let&amp;#39;s do it let&amp;#39;s
get rid of that for a second and let&amp;#39;s
go here and open up um main.
CDs and then use this thing which is you
know part of the previous
release why is it gone to edmx I don&amp;#39;t
know um use a
yaml close that and have a look at
Bookshop dot where is it where is it
where is it Bookshop or qro authors uh
Bookshop orders Bookshop Bookshop
authors Bookshop books there we go we
got their ID title author and we could
also say for example here preview as
sequel there we go so we&amp;#39;ve got here um
books Bookshop books ID title author ID
so let&amp;#39;s return that okay let&amp;#39;s do that
so let&amp;#39;s return that and say title and
then
author ID d 2 no I&amp;#39;m just making things
up right let&amp;#39;s do that this is
completely crazy but we don&amp;#39;t learn this
without trying things
right so there we sort of get an idea of
you know we would&amp;#39;t do this for real but
we can sort of see this the thing that
we have to return if we were if we are
going to handle this and in fact here&amp;#39;s
a really cool thing how do we generate a
uu ID if we wanted to you know if we
wanted to generate you VI ID that&amp;#39;s
quite interesting I think um let&amp;#39;s just
do that for example oh let&amp;#39;s format it
there we go perfect
I uh save
that uh
for
format let&amp;#39;s just do
H let&amp;#39;s just have some space here for
there we go there we
go check it out crypto I think we use
this I get go random crypto
dot random U ID I found this out because
I&amp;#39;ve got
somewhere uh Vic U
ID there we go I wanted to write have a
little uh a little um script which would
generate me uu IDs and we&amp;#39;ve used this
in a previous episode and the way I get
that to work is I just use node and I
use this crypto Library which is
standard you don&amp;#39;t have to you know
install it with mpm or anything and you
get that so it&amp;#39;s quite cool um so we can
say that do that there crypto random uid
save
that there we go we get uu ID but and
this is a little bit of a opening a door
as we&amp;#39;re going on Cor to say hey look in
there it&amp;#39;s quite quite cool we&amp;#39;re just
going to sort of you know do that in
passing check this
out CDs we&amp;#39;ve already got the CDs
constant here as a facade CDs s
utils
dot
uid check it
out so that&amp;#39;s just a little Glimpse
through the door of some amazing sort of
utility functions that we might want to
probably want to use when we
start developing a lot more custom stuff
okay anyway time&amp;#39;s 8:47 what is going on
right let&amp;#39;s do some debugging let&amp;#39;s do
some
debugging and what we&amp;#39;ll say here is
before we do anything else ah no we just
leave that there cuz it&amp;#39;s crazy it&amp;#39;s
stupid so let&amp;#39;s leave that there and go
back here and
say um a well if we were if we were&amp;#39;s
let&amp;#39;s yeah we got we got
time why don&amp;#39;t
we why don&amp;#39;t we say that have a scenario
where we say well we&amp;#39;ve got absolutely
no
idea what is going to get past how many
how many parameters I need to specify
you know we know we know that we need to
specify a parameter to capture the
incoming request and maybe use that to
work out how to you know how to um
Implement a custom Handler for that
request and return some data and we also
get this next function okay so those two
things we know but let&amp;#39;s say we didn&amp;#39;t
know how would you do it the way I would
do it is
using um I think this talking of the S6
I think this came in with the S6 as well
let me know in the comments if it
did the um the rest
operator sorry that was a bit crazy that
was because I&amp;#39;m in um normal mode the
rest
operator and then we&amp;#39;ll have something
like
things right so it doesn&amp;#39;t matter what
what it&amp;#39;s called now um by convention a
lot of people when they&amp;#39;re using the
rest operator like this they the
the parameter name that they use is the
word rest and what that means is the
rest of the things that
passed okay
now does anybody has anybody used the
rest operator and also does anybody know
the difference between the rest operator
and the spread operator or the spread
syntax because it&amp;#39;s basically the same
thing it&amp;#39;s three dots and they sort of
have the equal and opposite type of
effect in my brain so without without
trying to figure out this in theory
let&amp;#39;s debug and do it sort of like you
know let&amp;#39;s see what&amp;#39;s going on okay so
this is what I would do and the rest
thing is basically saying however many
things are are get to me here capture
them in an array called rest so let&amp;#39;s
put a debug thing click to add a break
point because people seem to want to go
debugging including
me and how do we debug well we&amp;#39;re ring
vs code which has you know some great
support for debugging nodejs
applications but the magic that allows
us to do what we&amp;#39;re going to be doing is
what we get in fact let&amp;#39;s do this here
right if do if I say um in temp CDs in
it X let just call it X
right and go into X and if we have a
look what&amp;#39;s in there we get a directory
automatically initialized for us called
dot vs code and that&amp;#39;s a magic directory
name that vs code recognizes obviously
right and inside of there
we
get a a launch configuration okay and
it&amp;#39;s these launch configurations it&amp;#39;s
like a vs code thing that allows us to
launch or start running start executing
stuff in different ways in different
modes now we&amp;#39;re not going to go into
that how that works and everything
however the upshot of that means that
because we&amp;#39;ve got this vs code vs code
directory in our project here vs code is
already
for us to say oh I would like to go to
the run and debug what&amp;#39;s the word run
and debug um perspective you know I know
it&amp;#39;s an eclipse term but this is what I
call these different things here let&amp;#39;s
go to the run and de book perspective
and this CDs serve that that phrase
there is exactly
from that thing there name of
configuration app oh if even says look
appears what&amp;#39;s it say appears in the
launch configuration drop-down menu
right so where is it there CDs serve
there is the launch configuration
dropdown menu so let&amp;#39;s do that in fact
because we&amp;#39;re going to be starting to
serve this to run the cap server let&amp;#39;s
stop this cap server that we&amp;#39;re running
here and let&amp;#39;s let&amp;#39;s also um oh no let&amp;#39;s
leave that running right let&amp;#39;s leave
that running no let&amp;#39;s not leave that
running let&amp;#39;s get rid of that let&amp;#39;s just
nice and clean
okay have we saved that no we haven&amp;#39;t
saved that yet let&amp;#39;s save that and now
let&amp;#39;s start
running check it out check it out we get
all sorts of crazy stuff here we&amp;#39;re not
going to look at this right now because
there&amp;#39;s a million things to look at it&amp;#39;s
a little bit
like so instead let&amp;#39;s put a break point
not here I didn&amp;#39;t mean to put it there
actually I I meant to put it here in
fact in fact let&amp;#39;s stop it let&amp;#39;s let&amp;#39;s
do it again let&amp;#39;s get rid of that and
put a breake point in the console log
first of all all
okay um so Mar Marian says uh I use
usually use a no debug terminal somehow
I don&amp;#39;t like the run debug from vs code
yeah I I know what you mean I know what
you mean um the main reason I&amp;#39;m doing it
in VSS code is because you know we have
this facility provided to us on the
plate by you know the cap uh
initialization mechanism and you know
let&amp;#39;s stick with vs code for now I
actually quite like debugging used in
the Chrome attaching a chrome session to
my nodejs uh process which is quite cool
um another way open JavaScript debug
terminal in Visual Studio code and then
you can see you see this watch exactly
yeah there&amp;#39;s loads of different ways of
debugging but I&amp;#39;m super conscious that
this is a back to basic so let&amp;#39;s just
use the the basic tools that we get here
that&amp;#39;s right so I put a debug statement
on the console log for I&amp;#39;m in the
anonymous function right let&amp;#39;s do that
first let&amp;#39;s let&amp;#39;s run that
again and it stops a little bit early
because it stopped here so we could say
um well there&amp;#39;s nothing really to say
here uh
console.log can we do that x uh XXX some
kisses there we go yeah you can do that
right fine okay but
now let&amp;#39;s put a debug statement sorry
not a debug statement a break point
let&amp;#39;s put a break point here okay and
then we&amp;#39;re stopped at the moment so
let&amp;#39;s
continue continue over there right and
so it continues the the the cap server
continues to start up right and it&amp;#39;s
ready
now we&amp;#39;ve not reached this this
breakpoint yet because we haven&amp;#39;t made a
call so let&amp;#39;s open the terminal and say
curl um Local Host
404 o data V4
Bookshop
books okay so we don&amp;#39;t get a response
look down there it&amp;#39;s not come back it&amp;#39;s
not come back that because we&amp;#39;re now
inside our callback function it stopped
on this break point so let&amp;#39;s go back to
the debug
console and we could say oh let&amp;#39;s just
carry on okay so that&amp;#39;s continue so that
would continue and continue executing
from where we left off however let&amp;#39;s
examine
now what is inside this rest parameter
we can just type in here
rest and we can see let&amp;#39;s make that a
little bit bigger yeah we can see here
it&amp;#39;s a little bit of a you know if
you&amp;#39;re you&amp;#39;re not used to it it&amp;#39;s like
why is why is that why is that but we
can
see that the the the debug console is
telling us that the contents of this
rest
variable is an array of two things two
two things and open square brackets
closed square brackets it&amp;#39;s an
array and check it out it says that the
first
thing is an instance of an OD data
request maybe I take back a little bit
what I said about classes but maybe not
I don&amp;#39;t know no anyway let&amp;#39;s not even go
there and the second thing is a an
italic F what do you think that means an
F in italics that tells me
function expand that so we can see the
zeroth element in this array of the rest
array is an O dat request the string
representation of which effectively is
read Bookshop do
books okay and the second thing is an
asynchronous
function basically that&amp;#39;s this thing
here right right and the asynchronous
function is sorry not this thing here
it&amp;#39;s the it&amp;#39;s the next function that we
could and we have been calling to say
just do the normal thing right does that
make sense so we can see just by using
the the rest operator which is this
thing here you know and just saying
anything that get past in fact let&amp;#39;s
there there there&amp;#39;s 856 oh my goodness
me let&amp;#39;s understand what this rest
operator does um let&amp;#39;s let&amp;#39;s continue
first of all so we can see we get the
output there there&amp;#39;s the output but
let&amp;#39;s stop it again right let&amp;#39;s stop it
make it a bit smaller again no small and
if we say okay well all right let&amp;#39;s
capture the request
oops and then whatever else I get sent
now let&amp;#39;s put that into the into this
rest variable uh or let&amp;#39;s again let&amp;#39;s
call it something else like other stuff
right save that and now run it again
what&amp;#39;s going on oh yeah there we go it&amp;#39;s
are we running yes we&amp;#39;re running um and
let&amp;#39;s get rid of that break point we
don&amp;#39;t don&amp;#39;t that break point let&amp;#39;s
continue and then we&amp;#39;ll ask for a
request again oh connection refuse what
we&amp;#39;re doing pause what&amp;#39;s going on De
console
terminal there we go fine that was a bit
too early right there so now request is
this read thing here so we can go into
the debug console R is that thing read
Bookshop books we&amp;#39;ll look into more next
time what that is it&amp;#39;s crazy good right
is that even English uh but also then we
have other stuff right so other
stuff is now just an array with one
thing because it&amp;#39;s just the rest of the
stuff right and that&amp;#39;s that function
that next function that we get past
right so that&amp;#39;s how we find out what we
get past and going back to the um
something related to what nickel asked
before in an anonymous function that&amp;#39;s
registered as an on Handler for in this
case a read request of the books entity
we don&amp;#39;t get any data passed in because
of course it&amp;#39;s an on Handler so it&amp;#39;s our
um our uh responsibility to
actually do whatever we need to do to
return the data to generate the data
which is what we&amp;#39;re doing here in a
really stupid way
we don&amp;#39;t get past the
data we will when we do an after Handler
that&amp;#39;s next
time what we get past is the most
important thing that we need in order to
fulfill our you know our destiny to to
to to replace the standard Handler for
the
on we get the request we get the details
of the request so we could say request
dot
method get request dot let&amp;#39;s have a look
what else we got here
query and the query is some SQL cql
right but we&amp;#39;re not even going to go
there because it&amp;#39;s
859 okay fantastic so thank you so much
for joining thank you for your
interaction and everything oh Visa says
I really like the spread operator in
the6 It&amp;#39;s Magic helps me a lot when I do
JavaScript types script I find myself
using the spread operator more often
than rest operator that&amp;#39;s cool main
thing is we know about what it is and we
know it&amp;#39;s useful for figuring out what
are we getting past here in this Handler
function anyway thanks for joining have
a great Friday uh I won&amp;#39;t see you next
week because I&amp;#39;m away and then we&amp;#39;ve got
um Kevin and Nora I think uh doing their
retrieval augmented Generation stuff on
live stream same time uh but we&amp;#39;ll see
you soon and look out for the you know
the next uh next event on LinkedIn
YouTube whatever okay bye for
now e